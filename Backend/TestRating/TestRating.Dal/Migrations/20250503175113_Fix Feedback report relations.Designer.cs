// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestRating.Dal;

#nullable disable

namespace TestRating.Dal.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250503175113_Fix Feedback report relations")]
    partial class FixFeedbackreportrelations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TestRating.Domain.Entities.Feedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("TestId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasFilter("\"IsDeleted\" = false");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TestId");

                    b.ToTable("Feedbacks", t =>
                        {
                            t.HasCheckConstraint("CK_Feedbacks_Rating", "\"Rating\" >= 0 AND \"Rating\" <= 10");
                        });
                });

            modelBuilder.Entity("TestRating.Domain.Entities.FeedbackReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsApproval")
                        .HasColumnType("boolean");

                    b.Property<string>("ReportMessage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<long>("ReportedFeedbackId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReviewerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ReportedFeedbackId")
                        .IsUnique();

                    b.HasIndex("ReviewerId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("TestRating.Domain.Entities.FeedbackReview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsPositive")
                        .HasColumnType("boolean");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReviewedFeedbackId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ReviewedFeedbackId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("TestRating.Domain.Entities.Profile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("TestRating.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("TestRating.Domain.Entities.Profile", "Owner")
                        .WithMany("FeedBacks")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TestRating.Domain.Entities.FeedbackReport", b =>
                {
                    b.HasOne("TestRating.Domain.Entities.Feedback", "ReportedFeedback")
                        .WithOne()
                        .HasForeignKey("TestRating.Domain.Entities.FeedbackReport", "ReportedFeedbackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestRating.Domain.Entities.Profile", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportedFeedback");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("TestRating.Domain.Entities.FeedbackReview", b =>
                {
                    b.HasOne("TestRating.Domain.Entities.Profile", "Owner")
                        .WithMany("Reviews")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestRating.Domain.Entities.Feedback", "ReviewedFeedback")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewedFeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("ReviewedFeedback");
                });

            modelBuilder.Entity("TestRating.Domain.Entities.Feedback", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("TestRating.Domain.Entities.Profile", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
