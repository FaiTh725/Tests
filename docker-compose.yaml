version: "3.8"

name: "Testing"

services:
  testing_gateway:
    build:
      context: .
      dockerfile: Dockerfile.ApiGateway
    container_name: testing_reverse_proxy
    ports:
      - "5502:5502"
      - "5501:5501"
    environment:
      - AllowedUrl="https://localhost:5173"
      - ASPNETCORE_URLS=https://+:5502;http://+:5501
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${SERTIFICATE_PASSWORD}
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/testing_app.pfx
    volumes:
      - ./certs:/https:ro
    networks:
      - application_net
    depends_on:
      - testing_feedback_api
      - testing_testing_api
      - testing_authorization_api

  # disable for local development
  # testing_logstash:
  #   image: logstash:8.16.6
  #   container_name: testing_logstash_service
  #   ports:
  #     - "5044:5044"
  #     - "9600:9600"
  #   volumes:
  #     - ./conf/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
  #     - ./conf/logstash/logstash.yaml:/usr/share/logstash/config/logstash.yml
  #     - loging_volume:/usr/share/logstash/data
  #   networks:
  #     - elastic_net
  #     - loging_net
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy

  # testing_kibana:
  #   image: kibana:8.16.6
  #   container_name: testing_kibana_service
  #   ports:
  #     - "5601:5601"
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
  #     - ELASTICSEARCH_USERNAME=${ELASTIC_USER}
  #     - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
  #     - xpack.security.enabled=false
  #   networks:
  #     - elastic_net
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy
  
  # # with custom service name logstash doesnt want to work i dont know how to fix and configure it
  # elasticsearch:
  #   image: elasticsearch:8.16.6
  #   container_name: testing_elastic_db
  #   ports:
  #     - "9200:9200"
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #     - XPACK_MONITORING_ENABLED=false  
  #     - xpack.security.http.ssl.enabled=false
  #   volumes:
  #     - testing_elastic_volume:/usr/share/elasticsearch/data
  #   networks:
  #     - elastic_net
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 10

  testing_feedback_api:
    build:
      context: .
      dockerfile: Dockerfile.Feedback
    container_name: testing_feedback_api
    ports:
      - "5401:5401"
      - "5402:5402"
    environment:
      - ConnectionStrings__PostgressConnection=Host=postgres_db;UserName=${PG_USER};Password=${PG_PASSWORD};Database=Feedback;Port=5432
      - ConnectionStrings__AzuriteBlobStorage=DefaultEndpointsProtocol=http;BlobEndpoint=http://azurite_storage:10000/${AZURITE_USER};AccountName=${AZURITE_USER};AccountKey=${AZURITE_PASSWORD}
      - JwtSettings__SecretKey=${JWT_SECRET_KEY}
      - JwtSettings__Issuer=${JWT_ISSUER}
      - JwtSettings__Audience=${JWT_AUDIENCE}
      - RabbitMqSettings__User=${RABBITMQ_USER}
      - RabbitMqSettings__Password=${RABBITMQ_PASSWORD}
      - RabbitMqSettings__Host=rabbitmq
      - ExternalServices__TestingService=https://testing_testing_api:5302
      - LogstashSettings__Host=tcp://testing_logstash
      - LogstashSettings__Port=5044
      - ASPNETCORE_URLS=https://+:5402;http://+:5401
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${SERTIFICATE_PASSWORD}
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/testing_app.pfx
    volumes:
      - ./certs:/https:ro
    networks:
      - testing_postgres_net
      - application_net
      - message_broker_net
      - azurite_net
      - loging_net
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres_db:
        condition: service_healthy

  testing_testing_api:
    build:
      context: .
      dockerfile: Dockerfile.Testing
    container_name: testing_testing_api
    ports:
      - "5301:5301"
      - "5302:5302"
    environment:
      - ConnectionStrings__RedisConnection=redis://:${REDIS_PASSWORD}@redis:6379
      - ConnectionStrings__MongoDbConnection=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongo_db:27017/?authSource=admin&replicaSet=rs0&directConnection=true
      - ConnectionStrings__AzuriteBlobStorage=DefaultEndpointsProtocol=http;BlobEndpoint=http://azurite_storage:10000/${AZURITE_USER};AccountName=${AZURITE_USER};AccountKey=${AZURITE_PASSWORD}
      - JwtSettings__SecretKey=${JWT_SECRET_KEY}
      - JwtSettings__Issuer=${JWT_ISSUER}
      - JwtSettings__Audience=${JWT_AUDIENCE}
      - RabbitMqSettings__User=${RABBITMQ_USER}
      - RabbitMqSettings__Password=${RABBITMQ_PASSWORD}
      - RabbitMqSettings__Host=rabbitmq
      - LogstashSettings__Host=tcp://testing_logstash
      - LogstashSettings__Port=5044
      - MongoDbName=Testing
      - ASPNETCORE_URLS=https://+:5302;http://+:5301
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${SERTIFICATE_PASSWORD}
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    volumes:
      - ./certs:/https:ro
    networks:
      - testing_mongo_net
      - message_broker_net
      - redis_net
      - application_net
      - azurite_net
      - loging_net
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongo_db:
        condition: service_healthy

  testing_authorization_api:
    build:
      context: .
      dockerfile: Dockerfile.Authorization
    container_name: testing_authorization_api
    ports:
      - "5201:5201"
      - "5202:5202"
    environment:
      - ConnectionStrings__RedisCacheConnection=redis:6379,password=${REDIS_PASSWORD}
      - ConnectionStrings__NpgConnection=Host=postgres_db;UserName=${PG_USER};Password=${PG_PASSWORD};Database=Authorize;Port=5432
      - JwtSettings__SecretKey=${JWT_SECRET_KEY}
      - JwtSettings__Issuer=${JWT_ISSUER}
      - JwtSettings__Audience=${JWT_AUDIENCE}
      - JwtSettings__ExpirationTimeRefreshTokenInDays=${JWT_EXPIRATIONTIME_IN_DAYS}
      - JwtSettings__ExpirationTimeInMinutes=${JWT_EXPIRATIONTIME_IN_MINUTES}
      - RabbitMqSettings__User=${RABBITMQ_USER}
      - RabbitMqSettings__Password=${RABBITMQ_PASSWORD}
      - RabbitMqSettings__Host=rabbitmq
      - LogstashSettings__Host=tcp://testing_logstash
      - LogstashSettings__Port=5044
      - ASPNETCORE_URLS=https://+:5202;http://+:5201
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${SERTIFICATE_PASSWORD}
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    volumes:
      - ./certs:/https:ro
    networks:
      - testing_postgres_net
      - message_broker_net
      - redis_net
      - application_net
      - loging_net
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres_db:
        condition: service_healthy

  testing_notification_api:
    build:
      context: .
      dockerfile: Dockerfile.Notification
    container_name: testing_notification_api
    ports:
      - "5101:5101"
      - "5102:5102"
    environment:
      - RabbitMqSettings__User=${RABBITMQ_USER}
      - RabbitMqSettings__Password=${RABBITMQ_PASSWORD}
      - RabbitMqSettings__Host=rabbitmq
      - EmailSettings__ReciverEmail=${EMAIL_RECIVER}
      - EmailSettings__Password=${EMAIL_PASSWORD}
      - LogstashSettings__Host=tcp://testing_logstash
      - LogstashSettings__Port=5044
      - ASPNETCORE_URLS=https://+:5102;http://+:5101
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${SERTIFICATE_PASSWORD}
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    volumes:
      - ./certs:/https:ro
    networks:
      - message_broker_net
      - loging_net
    depends_on:
      rabbitmq:
        condition: service_healthy

  mongo_db:
    image: mongo
    container_name: testing_mongo_db
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - testing_mongo_volume:/data/db
      - ./conf/mongo-keyfile:/etc/mongo/mongo-keyfile
    networks:
      - testing_mongo_net
    command: > 
      mongod --auth --replSet rs0 --keyFile /etc/mongo/mongo-keyfile --bind_ip_all
    healthcheck:
      test: mongosh --eval "db.adminCommand('ping')" || exit 1
      interval: 5s
      timeout: 30s
      retries: 10

  testing_mongo_express:
    image: mongo-express
    container_name: testing_mongo_express
    restart: always
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_USER}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_PASSWORD}
      - ME_CONFIG_MONGODB_URL=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongo_db:27017/?authSource=admin&replicaSet=rs0
      - ME_CONFIG_BASICAUTH=false
    networks:
      - testing_mongo_net
    depends_on:
      mongo_db:
        condition: service_healthy

  postgres_db:
    restart: always
    image: postgres
    container_name: testing_postgres
    ports:
      - "5555:5432"
    environment:
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_USER=${PG_USER}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - testing_postgres_volume:/var/lib/postgresql/data/pgdata
    networks:
      - testing_postgres_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  azurite_storage:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    container_name: testing_blob_storage
    ports:
      - "10000:10000"
    environment:
      - "AZURITE_ACCOUNTS=${AZURITE_USER}:${AZURITE_PASSWORD}"
    volumes:
      - testing_blob_volume:/data
    networks:
      - azurite_net

  rabbitmq:
    image: rabbitmq:management
    container_name: testing_message_broker
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    networks:
      - message_broker_net
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 5

  redis:
    image: redis/redis-stack:latest
    container_name: testing_redis_om
    ports:
      - "6379:6379"
      - "8001:8001"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_ARGS=--requirepass ${REDIS_PASSWORD}
    networks:
      - redis_net
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 3s
      timeout: 3s
      retries: 5

networks:
  testing_postgres_net:
    driver: bridge
  testing_mongo_net:
    driver: bridge
  message_broker_net:
    driver: bridge
  redis_net:
    driver: bridge
  azurite_net:
    driver: bridge
  application_net:
    driver: bridge
  elastic_net:
    driver: bridge
  loging_net:
    driver: bridge

volumes:
  testing_elastic_volume:
    driver: local
  testing_postgres_volume:
    driver: local
  testing_mongo_volume:
    driver: local
  testing_blob_volume:
    driver: local
  loging_volume:
    driver: local